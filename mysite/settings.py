"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# FLAW #3: Security Misconfigurations.
# SECRET_KEY is actually included in the settings.py (and thus also in git repo) and not read from .env file
# DEBUG = True, which can allow an attacker to gather additional information about the system
# FIX #3:
#   1) Read the secret key from and .env file
#   2) Disable debugging in production (there's a reason why it says 'SECURITY WARNING'...)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x$&ttfh)^qp73giyq$ua&cbj$3u9dj1a_=r3==dhz5met_+kf_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# FIX 4: Change this for testing
# ALLOWED_HOSTS = ['myimaginaryaddress.com']

# Application definition

INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# FLAW #4 (and FIX #4): Security Logging And Monitoring Failures. By default, Django runs in debug mode and logs a lot of stuff to console.
# If and when you disable the debug mode, only Django messages of ERROR or CRITICAL level are logged, and even they are logged to AdminEmailHandler
# (see: https://docs.djangoproject.com/en/5.1/ref/logging/#django-s-default-logging-configuration).

# Here's a quick POC logging setup that logs both security.DisallowedHost and security.csrf to a separate security.log file

# You can test this by:
#   1. Change DEBUG = False in settings.py -> This both removes localhost from the default allowed hosts, as well as disables the default debug logging
#   2. Include some random hostname that is not localhost in ALLOWED_HOSTS. For example, uncomment the example setting under FIX #3
#   3. Try to access the app. The connection is refused and the connection attempt is logged to the security.log file.

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'security_file': {
            'class': 'logging.FileHandler',
            'filename': 'security.log',
        }
    },
    'loggers': {
        'django.security.DisallowedHost': {
            'handlers': ['security_file'],
            'propagate': True,
        },
        'django.security.csrf': {
            'handlers': ['security_file'],
            'propagate': True,
        },
    },
}